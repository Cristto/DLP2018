/**
 * @generated VGen 1.3.3
 */

// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendrá un visitor que compila y 
que al ejecutarlo recorrerá todo el árbol (sin hacer nada aún en él).
Solo quedará añadir a cada método visit aquello adicional que tenga que realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede 
	// borrar (dicho método se heredará de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST.
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso ya se tiene implementado
	//		dicho recorrido y solo habrá que incrustar las acciones adicionales en el mismo. En este caso
	//		la llamada a 'super.visit' deberá ser borrada.
	// ---------------------------------------------------------


	//	class Program { List<Definition> definiciones; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getDefiniciones() != null)
			for (Definition child : node.getDefiniciones())
				child.accept(this, param);

		return null;
	}

	//	class DefVariable { String ident;  Type tipo; }
	public Object visit(DefVariable node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class DefFuncion { String ident;  Type tipo;  List<Definition> defParametros;  List<Definition> defVarLocal;  List<Statement> sentencias; }
	public Object visit(DefFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getDefParametros() != null)
			for (Definition child : node.getDefParametros())
				child.accept(this, param);

		if (node.getDefVarLocal() != null)
			for (Definition child : node.getDefVarLocal())
				child.accept(this, param);

		if (node.getSentencias() != null)
			for (Statement child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class DefStruct { String ident;  List<Definition> campos; }
	public Object visit(DefStruct node, Object param) {

		// super.visit(node, param);

		if (node.getCampos() != null)
			for (Definition child : node.getCampos())
				child.accept(this, param);

		return null;
	}

	//	class DefCampo { String ident;  Type tipo; }
	public Object visit(DefCampo node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class IfElse { Expression condicion;  List<Statement> sentenciasIf;  List<Statement> sentenciasElse; }
	public Object visit(IfElse node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentenciasIf() != null)
			for (Statement child : node.getSentenciasIf())
				child.accept(this, param);

		if (node.getSentenciasElse() != null)
			for (Statement child : node.getSentenciasElse())
				child.accept(this, param);

		return null;
	}

	//	class While { Expression condicion;  List<Statement> sentencias; }
	public Object visit(While node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentencias() != null)
			for (Statement child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class Read { Expression expresion; }
	public Object visit(Read node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Print { Expression expresion; }
	public Object visit(Print node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Printsp { Expression expresion; }
	public Object visit(Printsp node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Println { Expression expresion; }
	public Object visit(Println node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Asignacion { Expression leftExpr;  Expression rightExpr; }
	public Object visit(Asignacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeftExpr() != null)
			node.getLeftExpr().accept(this, param);

		if (node.getRightExpr() != null)
			node.getRightExpr().accept(this, param);

		return null;
	}

	//	class Return { Expression expresion; }
	public Object visit(Return node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Invocacion { String ident;  List<Expression> argumentos; }
	public Object visit(Invocacion node, Object param) {

		// super.visit(node, param);

		if (node.getArgumentos() != null)
			for (Expression child : node.getArgumentos())
				child.accept(this, param);

		return null;
	}

	//	class ExpresionAritmetica { Expression leftExpr;  String operador;  Expression rightExpr; }
	public Object visit(ExpresionAritmetica node, Object param) {

		// super.visit(node, param);

		if (node.getLeftExpr() != null)
			node.getLeftExpr().accept(this, param);

		if (node.getRightExpr() != null)
			node.getRightExpr().accept(this, param);

		return null;
	}

	//	class Comparacion { Expression leftExpr;  String operador;  Expression rightExpr; }
	public Object visit(Comparacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeftExpr() != null)
			node.getLeftExpr().accept(this, param);

		if (node.getRightExpr() != null)
			node.getRightExpr().accept(this, param);

		return null;
	}

	//	class ExpresionLogica { Expression leftExpr;  String operador;  Expression rightExpr; }
	public Object visit(ExpresionLogica node, Object param) {

		// super.visit(node, param);

		if (node.getLeftExpr() != null)
			node.getLeftExpr().accept(this, param);

		if (node.getRightExpr() != null)
			node.getRightExpr().accept(this, param);

		return null;
	}

	//	class MenosUnario { String operador;  Expression expresion; }
	public Object visit(MenosUnario node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Not { String operador;  Expression expresion; }
	public Object visit(Not node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class AccesoArray { Expression ident;  Expression index; }
	public Object visit(AccesoArray node, Object param) {

		// super.visit(node, param);

		if (node.getIdent() != null)
			node.getIdent().accept(this, param);

		if (node.getIndex() != null)
			node.getIndex().accept(this, param);

		return null;
	}

	//	class AccesoStruct { Expression ident;  String campo; }
	public Object visit(AccesoStruct node, Object param) {

		// super.visit(node, param);

		if (node.getIdent() != null)
			node.getIdent().accept(this, param);

		return null;
	}

	//	class Variable { String ident; }
	public Object visit(Variable node, Object param) {
		return null;
	}

	//	class LlamadaFuncion { String ident;  List<Expression> argumentos; }
	public Object visit(LlamadaFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getArgumentos() != null)
			for (Expression child : node.getArgumentos())
				child.accept(this, param);

		return null;
	}

	//	class Cast { Type tipo;  Expression expresion; }
	public Object visit(Cast node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class LitInt { int valor; }
	public Object visit(LitInt node, Object param) {
		return null;
	}

	//	class LitReal { float valor; }
	public Object visit(LitReal node, Object param) {
		return null;
	}

	//	class LitChar { char valor; }
	public Object visit(LitChar node, Object param) {
		return null;
	}

	//	class IntTipo {  }
	public Object visit(IntTipo node, Object param) {
		return null;
	}

	//	class RealTipo {  }
	public Object visit(RealTipo node, Object param) {
		return null;
	}

	//	class CharTipo {  }
	public Object visit(CharTipo node, Object param) {
		return null;
	}

	//	class IdentTipo { String valor; }
	public Object visit(IdentTipo node, Object param) {
		return null;
	}

	//	class ArrayTipo { int size;  Type tipo; }
	public Object visit(ArrayTipo node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class FuncionTipo { Type tipoRetorno; }
	public Object visit(FuncionTipo node, Object param) {

		// super.visit(node, param);

		if (node.getTipoRetorno() != null)
			node.getTipoRetorno().accept(this, param);

		return null;
	}

	//	class VoidTipo {  }
	public Object visit(VoidTipo node, Object param) {
		return null;
	}
}
